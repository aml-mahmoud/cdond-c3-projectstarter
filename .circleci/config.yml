version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  notify_on_fail:
    steps:
      - slack/notify:
          event: fail
          channel: project
          template: basic_fail_1
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install     
  install_tar:
    steps:
      - run:
          name: Install tar utility
          command: |
            apt install -y tar gzip  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
  install_tsc:
    description: install tsc
    steps:
      - run:
          name: install tsc
          command: |
            # curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
            # sudo apt-get install -y nodejs
            # ls -la /usr/local/lib/node_modules
            # whoami
            # #sudo chown -R $USER /usr/local/lib/node_modules/
            # #sudo chown 1001:1001 /usr/local/lib/node_modules/
            # sudo chown -R circleci /usr/local/lib/node_modules/
            # #sudo chown -R circleci ../lib/node_modules/typescript/bin/tsc
            sudo npm install -g typescript
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"      

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # Your code here
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_fail
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - install_tsc      
      - run:
          name: Build Backend
          command: |
            cd backend
            # sudo chmod 777 /usr/local/lib/node_modules
            # npm install typescript
            npm cache clean --force
            rm -rf node_modules
            npm install
            npm audit fix --force
            npm run build
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend             
