version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  notify_on_fail:
    steps:
      - slack/notify:
          event: fail
          channel: project
          template: basic_fail_1
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install     
  install_tar:
    steps:
      - run:
          name: Install tar utility
          command: |
            apt install -y tar gzip  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
  install_tsc:
    description: install tsc
    steps:
      - run:
          name: install tsc
          command: |
            # curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
            # sudo apt-get install -y nodejs
            # ls -la /usr/local/lib/node_modules
            # whoami
            # #sudo chown -R $USER /usr/local/lib/node_modules/
            # #sudo chown 1001:1001 /usr/local/lib/node_modules/
            # sudo chown -R circleci /usr/local/lib/node_modules/
            # #sudo chown -R circleci ../lib/node_modules/typescript/bin/tsc
            sudo npm install -g typescript
  install_ts-node:
    description: install ts_node
    steps:
      - run:
          name: install ts_node
          command: |
            sudo npm install -g ts-node

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"      

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # Your code here
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_fail
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - install_tsc      
      - run:
          name: Build Backend
          command: |
            cd backend
            # # sudo chmod 777 /usr/local/lib/node_modules
            # # npm install typescript
            # npm cache clean --force
            # rm -rf node_modules
            npm install
            #npm audit fix --force
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test 
          command: |
            cd frontend
            npm install
            npm run test  
      - notify_on_fail             
  test-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_nodejs    
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
            cd backend
            sudo npm install jest
            # npm cache clean --force
            # rm -rf node_modules
            # sudo npm install jest
            npm install
            npm run test 
      - notify_on_fail       
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: | 
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
      - notify_on_fail      
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: | 
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            #npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
            # npm audit fix --audit-level=critical --force
            # # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
      - notify_on_fail  
      
  notify_on_success:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - slack/notify:
          event: pass
          channel: project
          template: success_tagged_deployment_1

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      #- install_tar 
      - install_awscli 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 
          
      # Here's where you will add some code to rollback on failure   
  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["8c:99:17:21:a2:d7:d4:e3:de:d3:52:94:bc:10:28:23"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run Configure Server Ansible play
          command: |
              cd .circleci/ansible
              cat inventory.txt

              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment 
      # Here's where you will add some code to rollback on failure #            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_tsc
      - install_ts-node
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo chown -R circleci  /usr/local/lib/node_modules/ts-node
            sudo chown -R circleci /usr/local/lib/node_modules/typescript
            sudo chown -R circleci /usr/local/lib/node_modules
            sudo chown -R circleci /usr/local/bin
            sudo chown -R circleci /usr/local/bin/tsc
            sudo npm install -g ts-node
            npm install -g typescript
            npm install
            #npm audit fix --force
            #sudo echo 65536 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
            # sudo npm cache clean -f
            # sudo npm install -g n
            # sudo n stable 
            #node --max_old_space_size=4096 node_modules/@angular/cli/bin/ng build --prod
            #npm install -g @angular/cli
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
            name: Send migration status to kvdb.io
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl -k https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
                echo "No migrations are pending" 
              fi 
      - destroy-environment           
#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - notify_on_success:
          requires:
            - build-frontend
            - build-backend
            - test-backend
            - test-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]            
