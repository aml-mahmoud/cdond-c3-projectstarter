version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  notify_on_fail:
    steps:
      - slack/notify:
          event: fail
          channel: project
          template: basic_fail_1
  install_tar:
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip  
  install_ansible:
    steps:
      - run:
          name: install ansible
          command:
             yum install -y ansible
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"      

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # Your code here
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_fail
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             # Your code here
             #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_fail    
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test 
          command: |
            cd frontend
            npm install
            npm run test  
      - notify_on_fail             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout     
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
            cd backend
            npm install
            npm run test 
      - notify_on_fail       
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: | 
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
      - notify_on_fail      
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: | 
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            #npm audit --audit-level=critical
            # npm audit fix --audit-level=critical --force
            # # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
      - notify_on_fail  
      
  notify_on_success:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - slack/notify:
          event: pass
          channel: project
          template: success_tagged_deployment_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout
      - install_tar  
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 
          
      # Here's where you will add some code to rollback on failure   
  configure-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - install_ansible
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure             
          
             
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - notify_on_success:
          requires:
            - build-frontend
            - build-backend
            - test-backend
            - test-frontend
      - deploy-infrastructure:
          requires: [build-frontend, build-backend, test-backend, test-frontend, scan-frontend, scan-backend]
          # filters:
          #    branches:
          #      only: [master]

            